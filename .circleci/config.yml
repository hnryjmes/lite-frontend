version: 2.1
parameters:
  run_ui_tests:
    type: boolean
    default: false
  run_unit_tests:
    type: boolean
    default: true
  environment:
    type: string
    default: devdata

###############################################################################
# Env vars
###############################################################################
common_env_vars: &common_env_vars
  ENVIRONMENT: << pipeline.parameters.environment >>
  LITE_API_URL: https://lite-api-<< pipeline.parameters.environment >>.london.cloudapps.digital/
  PIPENV_VENV_IN_PROJECT: true

###############################################################################
# Images
###############################################################################

image_python: &image_python
  image: circleci/python:3.7

image_python_browsers: &image_python_browsers
  image: circleci/python:3.7-browsers

image_redis: &image_redis
  image: circleci/redis:3.2-alpine

###############################################################################
# Commands
###############################################################################

commands:
  run_make:
    description: Run makefile target with some setup
    parameters:
      label:
        type: string
        default: Execute make << parameters.target >>
      target:
        type: string
    steps:
      - run:
          name: Copy config
          command: cp ci.caseworker.env caseworker.env
      - run:
          name: << parameters.label >>
          command: make << parameters.target >>

  store_playwright_artifacts:
    description: Store Playwright artifacts
    steps:
      - store_artifacts:
          path: playwright_videos/

  vpn_install:
    description: "Install OpenVPN client"
    steps:
      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update
            sudo apt-get install openvpn openvpn-systemd-resolved

  vpn_connect:
    parameters:
      config:
        description: "ENV var name containing OpenVPN client .ovpn config file content base64 encoded"
        type: env_var_name
        default: VPN_CONFIG
    steps:
      - run:
          name: Check IP before VPN connection
          command: |
            ip a
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"

      - run:
          name: VPN Setup
          background: true
          command: |
            echo ${<<parameters.config>>:?} | base64 --decode > /tmp/config.ovpn

            SYS_RES_DNS=$(systemd-resolve --status | grep 'DNS Servers'|awk '{print $3}')
            echo $SYS_RES_DNS

            phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }')
            echo $phone_home

            vpn_command=(sudo openvpn
              --config /tmp/config.ovpn
              --route $SYS_RES_DNS 255.255.255.255 net_gateway
              --route 169.254.0.0 255.255.0.0 net_gateway
              --script-security 2
              --up /etc/openvpn/update-systemd-resolved --up-restart
              --down /etc/openvpn/update-systemd-resolved --down-pre
              --dhcp-option DOMAIN-ROUTE .)

            for IP in $(host runner.circleci.com | awk '{ print $4; }')
              do
                vpn_command+=(--route $IP 255.255.255.255 net_gateway)
                echo $IP
            done

            "${vpn_command[@]}" > /tmp/openvpn.log

      - run:
          name: Wait for the connection to be established and check IP
          command: |
            until [ -f /tmp/openvpn.log ] && [ "$(grep -c "Initialization Sequence Completed" /tmp/openvpn.log)" != 0 ]; do
              echo "Attempting to connect to VPN server..."
              sleep 1;
            done

            printf "\nVPN connected\n"
            printf "\nPublic IP is now $(curl checkip.amazonaws.com)\n"


  vpn_disconnect:
    steps:
      - run:
          name: Disconnect from OpenVPN
          command: |
            sudo killall openvpn || true
          when: always
  
  vpn_handshake:
    steps:
      - run:
          name: VPN handshake
          command: curl -I https://great.dev.uktrade.digital/
          when: always

  setup_code:
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run: pipenv install --dev --deploy
      - run: git submodule update --init

  setup_code_climate:
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
            ./tmp/cc-test-reporter before-build

  unit_tests:
    parameters:
      alias:
        type: string
    steps:
      - run:
          name: Run unit tests
          command: |
            pipenv run pytest --cov=.  --cov-report xml --cov-config=.coveragerc
            ./tmp/cc-test-reporter format-coverage -t coverage.py -o tmp/codeclimate.<< parameters.alias >>.json coverage/<< parameters.alias >>/.resultset.json

      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.<< parameters.alias >>.json
  ui_tests:
    steps:
      - run: mkdir -p test-results
      - run: |
          pipenv run pytest \
            -rP \
            --reruns=1 \
            --reruns-delay=60 \
            --headless \
            --disable-pytest-warnings \
            --junitxml=test-results/junit.xml
      - store_artifacts:
          path: ui_tests/screenshots
      - store_artifacts:
          path: openvpn.log
      - store_test_results:
          path: test-results

  lint:
    steps:
      - run: pipenv run bandit -r . --skip=B101 --exclude=/.venv,/ui_tests,/unit_tests,/tests_common
      - run: pipenv run prospector
      - run: pipenv run black . --check --diff

###############################################################################
# Jobs
###############################################################################

jobs:
  lint:
    working_directory: ~/repo
    docker:
      - <<: *image_python
    steps:
      - setup_code
      - lint

  caseworker_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.caseworker.env
      PYTEST_ADDOPTS: unit_tests/caseworker lite_forms/tests.py --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - setup_code
      - setup_code_climate
      - unit_tests:
          alias: caseworker

  exporter_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.exporter.env
      PYTEST_ADDOPTS: unit_tests/exporter unit_tests/core --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - setup_code
      - setup_code_climate
      - unit_tests:
          alias: exporter

  upload_coverage:
    working_directory: ~/repo
    docker:
      - <<: *image_python
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - setup_code_climate
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  caseworker_ui_test:
    # has to be machine executor as the VPN does not work in docker executor
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.caseworker
      PYTEST_ADDOPTS: ui_tests/caseworker --capture=no --nomigrations
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get --only-upgrade install google-chrome-stable
      - run: pyenv global 3.7.0
      - run: pip install pipenv
      - setup_code
      - vpn_install
      - vpn_connect
      - vpn_handshake
      - ui_tests
      - vpn_disconnect

  exporter_ui_test:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.exporter
      PYTEST_ADDOPTS: ui_tests/exporter --capture=no --nomigrations
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get --only-upgrade install google-chrome-stable
      - run: pyenv global 3.7.0
      - run: pip install pipenv
      - setup_code
      - vpn_install
      - vpn_connect
      - vpn_handshake
      - ui_tests
      - vpn_disconnect

  caseworker_e2e_test:
    machine:
      image: ubuntu-2004:202008-01
    resource_class: large
    steps:
      - checkout
      - run: git submodule update --init
      - vpn_install
      - vpn_connect
      - run_make:
          label: Run caseworker e2e tests
          target: start-caseworker caseworker-e2e-test
      - store_playwright_artifacts
      - vpn_disconnect

workflows:
  version: 2
  tests:
    when: << pipeline.parameters.run_unit_tests >>
    jobs:
      - lint
      - caseworker_unit_test
      - exporter_unit_test
      - caseworker_e2e_test
      - upload_coverage:
          requires:
           - caseworker_unit_test
           - exporter_unit_test
  ui_tests:
    when: << pipeline.parameters.run_ui_tests >>
    jobs:
      - caseworker_ui_test
      - exporter_ui_test
